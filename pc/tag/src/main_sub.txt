#include <ros/ros.h>
#include <time.h>
#include <std_msgs/Float64MultiArray.h>
#include <std_msgs/Float32MultiArray.h>
#include <std_msgs/Float32.h>
#include <std_msgs/String.h>
#include <std_msgs/Bool.h>
#include <geometry_msgs/Pose.h>
#include <sensor_msgs/Joy.h>
#include <string>

#include <iostream>
#include <vector>
#include <stdio.h>


struct getDateCamera
{
	double Rob1ToCamera[3]; //ロボット１から見たカメラの位置
	double CameraToRob1[3]; //カメラから見たロボット１の位置
	double Rob2ToCamera[3]; //ロボット２から見たカメラの位置
        double CameraToRob2[3]; //カメラから見たロボット３の位置
	double Rob3ToCamera[3]; //ロボット２から見たカメラの位置
        double CameraToRob3[3]; //カメラから見たロボット３の位置
};

struct getDateCamera robotino1[1];
struct getDateCamera robotino2[1];
struct getDateCamera robotino3[1];


class SubPub{
	private:
		ros::NodeHandle nh;
                ros::Publisher robotino_1_pub;
		ros::Publisher robotino_2_pub;
                ros::Publisher robotino_3_pub;
		ros::Subscriber joy_sub;
                ros::Subscriber robotino_1_camra_sub;
		ros::Subscriber robotino_2_camra_sub;
		ros::Subscriber robotino_3_camra_sub;
	public:
		SubPub(){
			robotino_1_pub  = nh.advertise<std_msgs::Float32MultiArray>("robotino1/velocity",1000);
                        robotino_2_pub  = nh.advertise<std_msgs::Float32MultiArray>("robotino2/velocity",1000);
                        robotino_3_pub  = nh.advertise<std_msgs::Float32MultiArray>("robotino3/velocity",1000);
                        joy_sub = nh.subscribe("joy", 1000, &SubPub::Joy_Callback,this);
                        robotino_1_camra_sub = nh.subscribe("ca_1", 1000, &SubPub::Robo1Callback,this);
			robotino_2_camra_sub = nh.subscribe("ca_2", 1000, &SubPub::Robo2Callback,this);
			robotino_3_camra_sub = nh.subscribe("ca_3", 1000, &SubPub::Robo3Callback,this);
		}
                void Robo1Callback(const std_msgs::Float64MultiArray& msg);
		void Robo2Callback(const std_msgs::Float64MultiArray& msg);
		void Robo3Callback(const std_msgs::Float64MultiArray& msg);
                void Joy_Callback(const sensor_msgs::Joy& joy_msg);
};

void SubPub::Robo1Callback(const std_msgs::Float64MultiArray& msg)
{
  int num = msg.data.size();
  //ROS_INFO("I susclibed [%i]", num);
  for (int i = 0; i < 2; i++)
  {
	  if(msg.data[i*7] == 1.0){
		  robotino1[0].Rob1ToCamera[0] = msg.data[i*7+1]; 
                  robotino1[0].Rob1ToCamera[1] = msg.data[i*7+2];
		  robotino1[0].Rob1ToCamera[2] = msg.data[i*7+3];

		  robotino1[0].CameraToRob1[0] = msg.data[i*7+4];
		  robotino1[0].CameraToRob1[1] = msg.data[i*7+5];
		  robotino1[0].CameraToRob1[2] = msg.data[i*7+6];
		  //ROS_INFO("Robotino1-> Robotino1 ");
	  }
	  if(msg.data[i*7] == 2.0){
                  robotino1[0].Rob2ToCamera[0] = msg.data[i*7+1];
                  robotino1[0].Rob2ToCamera[1] = msg.data[i*7+2];
                  robotino1[0].Rob2ToCamera[2] = msg.data[i*7+3];

                  robotino1[0].CameraToRob2[0] = msg.data[i*7+4];
                  robotino1[0].CameraToRob2[1] = msg.data[i*7+5];
                  robotino1[0].CameraToRob2[2] = msg.data[i*7+6];
		  //ROS_INFO("Robotino1-> Robotino2 ");
          }
	  if(msg.data[i*7] == 3.0){
                  robotino1[0].Rob3ToCamera[0] = msg.data[i*7+1];
                  robotino1[0].Rob3ToCamera[1] = msg.data[i*7+2];
                  robotino1[0].Rob3ToCamera[2] = msg.data[i*7+3];

                  robotino1[0].CameraToRob3[0] = msg.data[i*7+4];
                  robotino1[0].CameraToRob3[1] = msg.data[i*7+5];
                  robotino1[0].CameraToRob3[2] = msg.data[i*7+6];
		  //ROS_INFO("Robotino1-> Robotino3 ");
          }
    //ROS_INFO("[%i]:%f", i, msg.data[i]);
  }
}

void SubPub::Robo2Callback(const std_msgs::Float64MultiArray& msg)
{
  int num = msg.data.size();
  //ROS_INFO("I susclibed [%i]", num);
  for (int i = 0; i < 2; i++)
  {
          if(msg.data[i*7] == 1.0){
                  robotino2[0].Rob1ToCamera[0] = msg.data[i*7+1];
                  robotino2[0].Rob1ToCamera[1] = msg.data[i*7+2];
                  robotino2[0].Rob1ToCamera[2] = msg.data[i*7+3];

                  robotino2[0].CameraToRob1[0] = msg.data[i*7+4];
                  robotino2[0].CameraToRob1[1] = msg.data[i*7+5];
                  robotino2[0].CameraToRob1[2] = msg.data[i*7+6];
		  //ROS_INFO("Robotino2-> Robotino1 ");
          }
          if(msg.data[i*7] == 2.0){
                  robotino2[0].Rob2ToCamera[0] = msg.data[i*7+1];
                  robotino2[0].Rob2ToCamera[1] = msg.data[i*7+2];
                  robotino2[0].Rob2ToCamera[2] = msg.data[i*7+3];

                  robotino2[0].CameraToRob2[0] = msg.data[i*7+4];
                  robotino2[0].CameraToRob2[1] = msg.data[i*7+5];
                  robotino2[0].CameraToRob2[2] = msg.data[i*7+6];
		  //ROS_INFO("Robotino2-> Robotino2 ");
          }
          if(msg.data[i*7] == 3.0){
                  robotino2[0].Rob3ToCamera[0] = msg.data[i*7+1];
                  robotino2[0].Rob3ToCamera[1] = msg.data[i*7+2];
                  robotino2[0].Rob3ToCamera[2] = msg.data[i*7+3];

                  robotino2[0].CameraToRob3[0] = msg.data[i*7+4];
                  robotino2[0].CameraToRob3[1] = msg.data[i*7+5];
                  robotino2[0].CameraToRob3[2] = msg.data[i*7+6];
		  //ROS_INFO("Robotino2-> Robotino3 ");
          }
    //ROS_INFO("[%i]:%f", i, msg.data[i]);
  }
}

void SubPub::Robo3Callback(const std_msgs::Float64MultiArray& msg)
{
  int num = msg.data.size();
  //ROS_INFO("I susclibed [%i]", num);
  for (int i = 0; i < 2; i++)
  {
          if(msg.data[i*7] == 1.0){
                  robotino3[0].Rob1ToCamera[0] = msg.data[i*7+1];
                  robotino3[0].Rob1ToCamera[1] = msg.data[i*7+2];
                  robotino3[0].Rob1ToCamera[2] = msg.data[i*7+3];

                  robotino3[0].CameraToRob1[0] = msg.data[i*7+4];
                  robotino3[0].CameraToRob1[1] = msg.data[i*7+5];
                  robotino3[0].CameraToRob1[2] = msg.data[i*7+6];
		  //ROS_INFO("Robotino3-> Robotino1 ");
          }
          if(msg.data[i*7] == 2.0){
                  robotino3[0].Rob2ToCamera[0] = msg.data[i*7+1];
                  robotino3[0].Rob2ToCamera[1] = msg.data[i*7+2];
                  robotino3[0].Rob2ToCamera[2] = msg.data[i*7+3];

                  robotino3[0].CameraToRob2[0] = msg.data[i*7+4];
                  robotino3[0].CameraToRob2[1] = msg.data[i*7+5];
                  robotino3[0].CameraToRob2[2] = msg.data[i*7+6];
		  //ROS_INFO("Robotino3-> Robotino2 ");
          }
          if(msg.data[i*7] == 3.0){
                  robotino3[0].Rob3ToCamera[0] = msg.data[i*7+1];
                  robotino3[0].Rob3ToCamera[1] = msg.data[i*7+2];
                  robotino3[0].Rob3ToCamera[2] = msg.data[i*7+3];

                  robotino3[0].CameraToRob3[0] = msg.data[i*7+4];
                  robotino3[0].CameraToRob3[1] = msg.data[i*7+5];
                  robotino3[0].CameraToRob3[2] = msg.data[i*7+6];
		  //ROS_INFO("Robotino3-> Robotino3 ");
          }
    //ROS_INFO("[%i]:%f", i, msg.data[i]);
  }
}

void SubPub::Joy_Callback(const sensor_msgs::Joy& joy_msg)
{
	std_msgs::Float32MultiArray velocity;
        velocity.data.resize(3);
	float x,y,z;
	x = joy_msg.axes[1]*300;
        y = joy_msg.axes[0]*300;
        z = joy_msg.axes[3]*100;
        velocity.data[0] = x;
	velocity.data[1] = y;
	velocity.data[2] = z;
        
        if(joy_msg.buttons[4] == 1 && joy_msg.buttons[5] == 0 && joy_msg.buttons[3] == 0){
	}


        //////////////////////////////////////////
	if(joy_msg.buttons[4] == 1)
	{
		ROS_INFO("robotino1");
		robotino_1_pub.publish(velocity);
	}
	if(joy_msg.buttons[5] == 1)
        {
                ROS_INFO("robotino2");
                robotino_2_pub.publish(velocity);
        }
	if(joy_msg.buttons[3] == 1)
        {
                ROS_INFO("robotino3");
                robotino_3_pub.publish(velocity);
        }

	if(joy_msg.buttons[4] == 0)
        {
		velocity.data[0] = 0;
                velocity.data[1] = 0;
                velocity.data[2] = 0;
                robotino_1_pub.publish(velocity);
        }
        if(joy_msg.buttons[5] == 0)
        {
		velocity.data[0] = 0;
                velocity.data[1] = 0;
                velocity.data[2] = 0;
                robotino_2_pub.publish(velocity);
        }
        if(joy_msg.buttons[3] == 0)
        {
		velocity.data[0] = 0;
                velocity.data[1] = 0;
                velocity.data[2] = 0;
                robotino_3_pub.publish(velocity);
        }


}

int main(int argc, char** argv)
{
  ros::init(argc, argv, "basic_array_listener");
  SubPub subpub;
  ros::spin();

  return 0;
}
